{"version":3,"sources":["data/topics.csv","img/law.png","img/github.svg","img/index-man.svg","img/index-woman.svg","img/howtoplay.png","img/winners.svg","Components/LogIn.js","Components/Navbar.js","Components/Footer.js","Components/Home/TitleCard.js","Components/Home/HowToPlay.js","Components/Home/Home.js","Components/CreateGame/GetTopicModal.js","Components/CreateGame/InputTopic.js","Components/CreateGame/InputPlayers.js","Components/CreateGame/CreateGame.js","Components/Game/AudienceJoin.js","Components/Game/Scoreboard.js","Components/Game/Timer.js","Components/Game/Controls.js","Components/Game/AdminGame.js","Components/Game/WinnerModal.js","Components/Game/Vote.js","Components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LogIn","id","uiConfig","this","props","firebaseAuth","fbAuth","React","Component","Navbar","unregisterAuthObserver","firebase","auth","onAuthStateChanged","user","setState","isSignedIn","updateGame","onClick","signOut","to","className","src","require","width","height","alt","signInOrOut","Footer","href","TitleCard","handleInput","event","value","onInput","target","buttonDisabled","length","disabled","state","type","placeholder","maxLength","onChange","role","HowToPlay","Home","GetTopicModal","onCategorySelected","category","onCategorySelection","console","log","nestedModal","topic1","topic2","data","Modal","show","onHide","handleClose","centered","Header","closeButton","Title","Body","class","options","Button","variant","InputTopic","showModal","modal","closeModal","stateChanges","selectedTopic","selected","categoryTopics","i","topic","push","firstTopic","Math","floor","random","secondTopic","input","closeAll","d3","topics","then","topicsVisited","includes","key","data-toggle","data-target","bind","generateCategories","InputPlayers","CreateGame","player1","player2","sessionID","database","ref","on","snapshot","sesh","val","ids","Object","keys","sessionRef","AudienceJoin","code","Scoreboard","Timer","startCountdown","minutesLeft","convertToMinutes","timeLeft","isBackgroundYellow","getPhaseName","currentPhase","phases","phaseIndex","title","outputString","speaker","setInterval","everySecond","isAdminTimer","clearInterval","timerObject","seconds","sec","trunc","Controls","buttonClicked","enable","disable","winner","aria-label","prevPhase","aria-hidden","nextPhase","newPhase","AdminGame","WinnerModal","Vote","onClickPlayer1","voted","onClickPlayer2","disableVoting","votes","votedPlayer","tally","child","voteSum","set","catch","err","numVotes","castVote","size","votingMessage","modalBody","displayWinner","Game","sessionIsGood","firebaseListener","once","exists","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","App","handleChange","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2d6b57bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/topics.b3d8a1b2.csv\";","module.exports = __webpack_public_path__ + \"static/media/law.79e97b25.png\";","module.exports = __webpack_public_path__ + \"static/media/github.192a6620.svg\";","module.exports = __webpack_public_path__ + \"static/media/index-man.f1ccb1e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/index-woman.f3034efd.svg\";","module.exports = __webpack_public_path__ + \"static/media/howtoplay.98c4b744.png\";","module.exports = __webpack_public_path__ + \"static/media/winners.49d728a1.svg\";","import React from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nclass LogIn extends React.Component {\n    render() {\n        return (\n            <div id=\"login\">\n                <h1>Please sign in</h1>\n                <p>to host a debate</p>\n                <StyledFirebaseAuth uiConfig={this.props.uiConfig} firebaseAuth={this.props.fbAuth}/>\n            </div>\n        )\n    }\n}\n\nexport default LogIn;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LogIn from './LogIn.js';\nimport firebase from 'firebase/app';\n\nclass Navbar extends React.Component {\n\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n      (user) => {\n        this.setState({\n          isSignedIn: !!user\n        }, () => {\n          this.props.updateGame(\"isSignedIn\", !!user)\n        })\n\n      }\n    );\n  }\n  \n  // why do we need to this again? should it be in here or App?\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  signInOrOut() {\n    if (this.props.isSignedIn === true) {\n      return (\n        <span onClick= {() => firebase.auth().signOut()}><strong>Sign Out</strong></span>\n      )\n    } else {\n      return (\n        <Link to=\"/sign-in\">Sign In</Link>\n      )\n    }\n  }\n\n  render() {\n    return(\n      <nav className=\"navbar fixed-top navbar-light\">\n        <div className=\"d-flex justify-content-between\">\n          <Link to=\"/\" className=\"navbar-brand\">\n            <img src={require(\"../img/law.png\")} width=\"30\" height=\"30\" className=\"d-inline-block align-top logo\" alt=\"A gavel\"/>\n            DebateNOW\n          </Link>\n        </div>\n        <div id=\"nav-links\">\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/create-game\">Create New Game</Link>\n          {this.signInOrOut()}\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default Navbar;","import React from 'react';\n\n/**\n * renders the website footer.\n * static\n * used on all pages\n */\nclass Footer extends React.Component {\n  render() {\n    return(\n      <footer>\n          <div className=\"d-flex justify-content-between align-items-center\">\n              <div>\n                  {/* <p className=\"mb-0\">Read up on why we made this tool<a href=\"proposal.html\">here.</a></p> */}\n                  <p className=\"mb-0\">&copy; 2020 Kiran Pradhan and Patrin Sinteppadon</p>\n              </div>\n              <a href=\"https://github.com/info340a-w20/project-kpdebate\">\n                  <img className=\"social-media\" src={require(\"../img/github.svg\")} alt=\"Github logo\" />\n              </a>\n          </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass TitleCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      disabled: true\n    }\n  }\n\n  handleInput = (event, value) => {\n    this.props.onInput(\"sessionID\", event.target.value);\n    let buttonDisabled = (event.target.value.length !== 4)\n    this.setState({disabled: buttonDisabled});\n  }\n\n  render() {\n    return(\n      <div id=\"title-card\" className=\"container\">\n        <div className=\"text-center\">\n          {/* Header */}\n          <header>\n            <h1 className=\"display-1 font-weight-bold\">DebateNOW</h1>\n            <p className=\"lead subtitle font-weight-bold\">A simple game where you argue about stuff</p>\n            <hr className=\"my-4\" />\n          </header>\n\n          {/* Game options */}\n          <div className=\"row\">\n            {/* Flavor img */}\n            <div className=\"col\">\n              <div className=\"d-flex justify-content-center\">\n                <img id=\"left-img\" className=\"img-title\" src={require(\"../../img/index-man.svg\")} alt=\"a man\" />\n              </div>\n            </div>\n\n            {/* New game / Join Game */}\n            <div className=\"col text-center\">\n              <div className=\"d-flex justify-content-center align-items-center\">\n                <form className=\"mb-2 mr-sm-2\">\n                  <input id=\"session-name\" className=\"border border-secondary\" type=\"text\"\n                    placeholder=\"Enter Game Code\" maxLength={4} onChange={this.handleInput}/>\n                </form>\n                <Link to=\"/game\"><button id=\"btn-join\" className=\"btn btn-primary btn-md join\" href=\"game.html\" disabled={this.state.disabled}>Join!</button></Link>\n              </div>\n              <h2 className=\"lead my-4\">OR</h2>\n              <Link to=\"/create-game\"><a className=\"btn btn-primary btn-lg create\" href=\"create-game.html\" role=\"button\">Create New Game</a></Link>\n              \n            </div>\n\n            {/* Flavor img */}\n            <div className=\"col\">\n              <div className=\"d-flex justify-content-center\">\n                <img className=\"img-title\" src={require(\"../../img/index-woman.svg\")} alt=\"a woman\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TitleCard;","import React from 'react';\n\n/**\n * renders the \"How to play\" section of the home page.\n * No props. static.\n */\nclass HowToPlay extends React.Component {\n  render() {\n    return( \n      <div id=\"how-to-play\">\n        <h2 className=\"text-center display-4 font-weight-bold\"> How to Play </h2>\n        <div>\n          <p className=\"subcaption text-center\">\n            Practice your debate skills with this simple proof-of-concept web game.\n          </p>\n        </div>\n        {/* <div className=\"w-70\">\n          <ul>\n            <li>Organize a game by choosing a randomly generated topic or by typing in your own.\n            </li>\n            <li>Choose two players to debate.</li>\n            <li>Tell your friends to join in using the code provided.</li>\n            <li>Press begin and SPAR!</li>\n          </ul>\n        </div> */}\n        <div className=\"w-70 text-left\">\n          <p>One person must create the game with two debaters and a topic in mind. Audience members can\n          join by using the provided game code. Watch the two go head to head, and then vote on the\n          winners.</p>\n          \n          <p>Each debater takes turns going through the following phases in the debate format.</p>\n          <ol>\n            <li>Opening Statements. Each speaker gives their initial statements on why their argument is correct. Try to give a thesis and a few arguments.</li>\n            <li>Rebuttal. Each speaker gets the chance to counter their opponent's initial statements. Try to remember their arguments and use reason to make them sound invalid.</li>\n            <li>Cross-Examination. Each speaker gets to ask questions to their opponent for 3 minutes, hoping to poke holes in their arguments. The audience can join in too!</li>\n            <li>Closing Statements. Each speaker delivers a final summary on their argument. Try to summarize where you succeeded and where your opponent fumbled!</li>\n            <li>Voting. The debate is over! Time for Admin to enable voting for the audience.</li>\n          </ol>\n\n          <p>This app takes technical inspiration from<a target=\"_blank\" href=\"https://kahoot.it/\">kahoot.it</a>, and content inspiration the<a target=\"_blank\" href=\"https://www.facinghistory.org/resource-library/teaching-strategies/spar-spontaneous-argumentation\">Spontaneous Argumentation</a>debate event.</p>\n        </div>\n        <div className=\"text-center\">\n          <img src={require(\"../../img/howtoplay.png\")} className=\"content-image\" alt=\"Two men thinking\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HowToPlay;","import React from 'react';\nimport TitleCard from './TitleCard.js';\nimport HowToPlay from './HowToPlay.js';\nimport '../../css/home.css';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"w-70 mx-auto\">\n        <TitleCard onInput={this.props.updateGame}/>\n        <HowToPlay />\n      </div>\n    );\n\n  }\n}\n\nexport default Home;","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport '../../css/create-game.css';\n\nclass GetTopicModal extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n        nestedModal: false,\n        category: \"Anything\",\n        topic1: this.props.topic1,\n        topic2: this.props.topic2\n      }\n      console.log(this.state.topic1 + ',' + this.state.topic2);\n      console.log('modal' + this.props.data);\n  }\n\n  onCategorySelected = (event, value) => {\n    this.setState({category: event.target.value});\n    this.props.onCategorySelection(event, value);\n    console.log(\"category has been selected\");\n  }\n\n  render() {\n    return (\n      <div>\n        <Modal show={this.props.show} onHide={this.props.handleClose} centered>\n          <Modal.Header closeButton>\n            <Modal.Title>Get random topics</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>Select a general category for your topic choices.</p>\n            <select class=\"browser-default custom-select w-50\" value={this.state.category} onChange={this.onCategorySelected}>\n              <option value=\"Anything\">Anything</option>\n              {this.props.options}\n            </select>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={() => {this.setState({nestedModal: true})}}>\n              Get Topics\n            </Button>\n            <Modal show={this.state.nestedModal} onHide={() => {this.setState({nestedModal: false})}} centered>\n            <Modal.Header closeButton>\n              <Modal.Title>Debate about:</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Button variant=\"secondary\" onClick={(event, value) => this.props.handleClose(this.state.topic1)}>\n                  {this.state.topic1}\n                </Button>\n                <p class=\"my-2\">OR</p>\n                <Button variant=\"secondary\" onClick={(event, value) => this.props.handleClose(this.state.topic2)}>\n                  {this.state.topic2}\n                </Button>\n            </Modal.Body>\n            <Modal.Footer>\n            </Modal.Footer>\n          </Modal>\n            <Button variant=\"secondary\" onClick={this.props.handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default GetTopicModal;","import React from 'react';\nimport GetTopicModal from './GetTopicModal.js';\nimport * as d3 from 'd3';\nimport topics from '../../data/topics.csv';\nimport '../../css/create-game.css'\n\nexport class InputTopic extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            modal: false, // has no knowledge of nested modal\n            closeAll: false,\n            category: \"Anything\", // how to send category up to input topic from gettopicmodal?\n            selectedTopic: \"\",\n            topic1: \"Is Adidas better than Nike?\",\n            topic2: \"Is cereal a soup?\" // start with default topics\n        }\n        console.log(this.state)\n    }\n\n    componentDidMount() {\n        d3.csv(topics).then((data) => {\n            this.setState({\n                data: data\n            });\n            console.log(this.state.data)\n        });\n    }\n\n    showModal = () => {\n        this.setState({modal: true})\n    }\n\n    closeModal = (value) => {\n        let stateChanges = {\n            selectedTopic: value,\n            modal: false\n        };\n        this.setState(stateChanges);\n        // bind selected topic to the topic textbox on the create-game page\n\n    }\n\n    generateCategories() {\n        let options = [];\n        let topicsVisited = [];\n        for (let i = 0; i < this.state.data.length; i++) {\n            let topic = this.state.data[i];\n            if (!topicsVisited.includes(topic.category)) {\n                topicsVisited.push(topic.category);\n                options.push(<option key={i} value={topic.category}>{topic.category}</option>);\n            }\n        }\n        return options;\n    }\n\n    // after a category is selected in GetTopicModal,\n    // update state and generate 2 random topics from category\n    onCategorySelection = (event, value) => {\n        let selected = event.target.value\n        console.log('set category to', selected);\n        // after a category is selected, generate 2 random topics\n        let categoryTopics = [];\n        // evaluate what subcategory to \"query\" from\n        if (selected !== \"Anything\") {\n            for (let i = 0; i < this.state.data.length; i++) {\n                let topic = this.state.data[i];\n                if (topic.category === selected) {\n                    categoryTopics.push(topic);\n                    console.log(topic);\n                }\n            }\n        } else {\n            categoryTopics = this.state.data;\n            console.log('anything data');\n        }\n        // randomly select 2 topics from the described category\n        // let twoTopics = []\n        let firstTopic = Math.floor((Math.random() * categoryTopics.length));\n        let secondTopic = null;\n        this.setState({\"topic1\": categoryTopics[firstTopic]});\n        // twoTopics.push(categoryTopics[firstTopic]);\n        console.log(categoryTopics)\n        console.log('topic1, ' + firstTopic);\n        while (secondTopic === null || secondTopic === firstTopic) { // to avoid duplicates\n            secondTopic = Math.floor((Math.random() * categoryTopics.length));\n        }\n        this.setState({\"topic2\": categoryTopics[secondTopic]});\n        // twoTopics.push(categoryTopics[secondTopic]);\n        console.log('topic2, ' + secondTopic);\n        // return twoTopics;\n        this.setState({category: selected}); // update state with category selected\n    }\n\n    onInput = (input) => {\n        this.setState({\"selectedTopic\": input})\n        this.props.onInput(\"topic\", input);\n    }\n\n    render(){\n        return (\n            <section id=\"topic\" className=\"createGameFirst createGameContainer\">\n            <div className=\"card createGameCard\">\n                <div className=\"card-body\">\n                    <h4 className=\"card-title\">Topic</h4>\n                        <div className=\"mx-3\">\n                            <div className=\"row\">\n                                <form className=\"col-sm-8 col-md-6 mx-auto\">\n                                    <input id=\"input-topic\" className=\"w-100\" type=\"text\" placeholder=\"Enter a debate topic...\" value={this.state.selectedTopic} onChange={(event, value) => this.onInput(event.target.value)}/>\n                                </form>\n                            </div>\n                        <div className=\"row\">\n                            <button id=\"open-modal\" className=\"btn btn-dark mt-2 ml-auto\" data-toggle=\"modal\" data-target=\"#modalRandomize\" onClick={()=> {this.showModal()}}>Randomize!</button>\n                        </div>\n                    </div>\n                </div>\n                <GetTopicModal show={this.state.modal} handleClose={this.closeModal.bind(this)} onCategorySelection={this.onCategorySelection} options={this.generateCategories()} topic1={this.state.topic1} topic2={this.state.topic2}/>\n            </div>\n            </section>\n        )\n    }\n} ","import React from 'react';\nimport '../../css/create-game.css'\n\nexport class InputPlayers extends React.Component {\n    render() {\n        return (\n            <section id=\"players\" class=\"createGameContainer\">\n                <div class=\"card createGameCard\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\">Players</h4>\n                        <div class=\"mx-3\">\n                            <div class=\"row\">\n                                <form class=\"col-sm-8 col-md-6 mx-auto\">\n                                    <input id=\"input-player1\" class=\"w-100\" type=\"text\" placeholder=\"Enter Player One......\" onChange={(event, value) => this.props.onInput(\"player1\", event.target.value)}/>\n                                    <input id=\"input-player2\" class=\"w-100\" type=\"text\" placeholder=\"Enter Player Two......\" onChange={(event, value) => this.props.onInput(\"player2\", event.target.value)}/>\n                                </form> \n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n    \n}","import React from 'react';\nimport { InputTopic } from './InputTopic.js';\nimport { InputPlayers } from './InputPlayers.js';\nimport LogIn from '../../Components/LogIn.js';\nimport { Link } from 'react-router-dom';\nimport '../../css/create-game.css';\nimport firebase from 'firebase/app';\n\nclass CreateGame extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            topic: \"\",\n            player1: \"\",\n            player2: \"\"\n        }\n        // generate and lift up random sessionID\n        let sessionID = Math.floor(1000 + Math.random() * 9000);\n        let existingSesssions = firebase.database().ref('sessions');\n        existingSesssions.on('value', (snapshot) => {\n            let sesh = snapshot.val();\n            let ids = Object.keys(sesh);\n            while (ids.includes(sessionID)) {\n                sessionID = Math.floor(1000 + Math.random() * 9000);\n            }\n            console.log(sesh);\n        })\n        this.props.updateGame(\"sessionID\", sessionID);\n        this.sessionRef = firebase.database().ref('sessions/' + sessionID);\n    }\n\n    componentDidMount() {\n        this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n            (user) => {\n                this.setState({\n                    isSignedIn: !!user\n                }, () => {\n                    this.props.updateGame(\"isSignedIn\", !!user)\n                    // this.props.updateGame(\"uid\", user.uid)\n                })\n\n            }\n        );\n    }\n\n    // why do we need to this again? should it be in here or App?\n    componentWillUnmount() {\n        this.unregisterAuthObserver();\n    }\n\n    onChange = (key, value) => {\n        this.setState({ [key]: value });\n        this.props.updateGame(key, value);\n    }\n\n    render() {\n        // must sign in to access admin game page\n        if (!this.state.isSignedIn) {\n            return (\n                <LogIn uiConfig={this.props.uiConfig} fbAuth={firebase.auth()}/>\n            );\n        } else {\n        return(\n            <div className=\"w-70 mx-auto\">\n                <InputTopic onInput={this.onChange}/>\n                <InputPlayers onInput={this.onChange}/>\n                <section class=\"createGameContainer\">\n                    <div class=\"text-center\">\n                        <Link to=\"/admin-game\"><button id=\"btn-start\" class=\"btn btn-primary btn-lg mt-2 mx-auto\" disabled={this.state.topic === \"\" || this.state.player1 === \"\" || this.state.player2 === \"\"}>Begin Debate</button></Link>\n                    </div>\n                </section>\n            </div>\n        )\n        }\n    }\n}\n\nexport default CreateGame;","import React from 'react';\n\nclass AudienceJoin extends React.Component {\n    render() {\n        return(\n            <section className=\"container\">\n                <div>\n                    <p>\n                        Invite audience members to join this debate at<a href=\"kpdebate.com\">kpdebate.com</a> with game\n                        code<span className=\"code\"> {this.props.code}</span>\n                    </p>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default AudienceJoin;","import React from 'react';\nimport '../../css/game.css';\n\n/**\n * displays the topic, the names of the players, and their stance on the argument\n * @prop {string} player1 - name of the first player\n * @prop {string} player2 - name of the second player\n * @prop {string} topic - the argument being debated\n */\nclass Scoreboard extends React.Component {\n    render() {\n        return (\n            <section className=\"first gameContainer\">\n                {/* Row with names */}\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h1 id=\"player-1\">{this.props.player1}</h1>\n                        <h2>is arguing Pro</h2>\n                    </div>\n\n                    <div className=\"col\">\n                        <h1 id=\"player-2\">{this.props.player2}</h1>\n                        <h2>is arguing Con</h2>\n                    </div>\n                </div>\n\n                {/* Row with topic */}\n                <div className=\"row\">\n                    <h3 id=\"topic\" className=\"font-weight-bold mb-0\">{this.props.topic}</h3>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default Scoreboard;","import React from 'react';\nimport '../../css/game.css';\n\n/**\n * controls the timer of the current round in the game.\n * @prop {string} sessionID - the ID of the session being accessed\n * @prop {object} timerObject - the object representing the timer.\n * @prop {number} timeLeft - number of seconds left in the round.\n * @prop {number} phaseIndex - the current phase of the debate.\n * @prop {object} phases - const object of the phases of the debate.\n * @prop {boolean} isAdminTimer - determines whether this timer is in Admin Game.\n * @prop {function} updateGame - the callback function used to update App's state\n */\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.sessionRef = firebase.database().ref('sessions/' + this.props.sessionID);\n        this.startCountdown();\n    }\n\n    render() {\n        let minutesLeft = this.convertToMinutes(this.props.timeLeft);\n        return (\n        <section className=\"gameContainer\"> \n            <div className=\"timer col-md-6\">\n                <div id=\"timer-card\" className={\"card timerCard \" + this.isBackgroundYellow()}>\n                    <h3 className=\"card-title text-center\">\n                        <div className=\"col mt-2\">\n                            <p id=\"timer-label\">{this.getPhaseName()}</p>\n                            <p id=\"timer\" className=\"mb-0\">{minutesLeft}</p>\n                        </div>\n                    </h3>\n                </div>\n            </div>\n        </section> \n        );\n    }\n\n    /**\n     * returns a suitable name for the current Phase.\n     * format: \"CURRENT_SPEAKER - CURRENT PHASE\"\n     */\n    getPhaseName() {\n        let currentPhase = this.props.phases[this.props.phaseIndex];\n        if (currentPhase.title === \"Voting\") {\n            return \"Time to Vote!\";\n        }\n\n        let outputString = (currentPhase.speaker === 1 ? this.props.player1 : this.props.player2);\n        outputString += \" - \" + currentPhase.title;\n        return outputString;\n    }\n\n    /**\n     * initializes a timer that updates the visual element of a timer very second.\n     */\n    startCountdown() {\n        return setInterval(() => this.everySecond(this.props.timeLeft), 1000);\n    }\n\n    /**\n     * the behavior of the timer for every second the timer ticks.\n     * ! the interval technically doesn't clear. Will that screw up setting up timers after the first one?\n     */\n    everySecond(timeLeft) {\n        let i = timeLeft;\n        if (i === 0 && this.props.isAdminTimer) {\n            clearInterval(this.props.timerObject); // clear the timer\n            this.props.updateGame(\"timerObject\", null);\n        } else if (this.props.isAdminTimer){\n            i--;\n            this.props.updateGame(\"timeLeft\", i);\n            console.log(\"time left:\" + timeLeft);\n        } else {\n            // console.log(\"not an admin timer!\");\n        }\n    }\n\n    updateFirebase() {\n        // hmm shouldn't this be declared in App\n    }\n\n    /**\n     * If seconds is greater than 60, returns it in a minutes-converted format.\n     * Also, if seconds=0, converts the message to \"Time's Up!\"\n     * @param {number} seconds - the number of seconds to be converted to minutes\n     */\n    convertToMinutes(seconds) {\n        if (seconds === 0) {\n            if (this.props.phases[this.props.phaseIndex].title !== \"Voting\") {\n                return \"Time's up!\";\n            } else {\n                return \"\";\n            }\n        } else {\n            let min = Math.trunc(seconds / 60);\n            let sec = seconds % 60; // number of seconds left in the current minute\n            if (sec < 10) {\n                sec = \"0\" + sec;\n            }\n            return min + \":\" + sec;\n        }\n    }\n\n    /**\n     * defines the color of the timer depending on how much time is left.\n     * The timer turns yellow when time runs out.\n     */\n    isBackgroundYellow() {\n        return (this.props.timeLeft === 0) ? \"bg-yellow\" : \"bg-light\";\n    }\n}\n\nexport default Timer;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport '../../css/game.css';\n\n/**\n * used to control which phase of the debate currently going.\n * @prop {number} phaseIndex - the current phase of the debate.\n * @prop {object} phases - const object of the phases of the debate.\n * @prop {function} updateGame - the callback function used to update App's state\n */\nclass Controls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            enable: false,\n            disable: true,\n            winner: true,\n        }\n    }\n\n    buttonClicked = (key) => {\n        // update state to toggle button disabled\n        let stateChanges = {};\n        if (key === \"enable\") {\n            stateChanges = {\n                \"enable\": true,\n                \"disable\": false,\n                \"winner\": true\n            };\n            // lift up voting state to App\n            this.props.updateGame(\"enable\", true); // enable audience voting\n        } else if (key === \"disable\") {\n            stateChanges = {\n                \"enable\": false,\n                \"disable\": true,\n                \"winner\": false\n            };\n            this.props.updateGame(\"enable\", false); // disable audience voting\n        } else {\n            stateChanges = {\n                \"enable\": true,\n                \"disable\": true,\n                \"winner\": true\n            };\n            this.props.updateGame(\"enable\", false); // disable audience voting\n            this.props.updateGame(\"displayWinner\", true); // display winner to audience\n        }\n        this.setState(stateChanges);\n    }\n\n    render() {\n        return (\n            <div className=\"text-center\"> \n                <div className=\"btn-group btn-group-lg\" role=\"group\" aria-label=\"\">\n                    <button onClick={() => this.prevPhase()} type=\"button\" className=\"btn btn-outline-primary btn-secondary\"><i\n                            className=\"fa fa-step-forward fa-flip-horizontal\" aria-label=\"backward\"\n                            aria-hidden=\"true\"></i></button>\n                    <button onClick={() => this.nextPhase()} type=\"button\" className=\"btn btn-outline-primary btn-secondary\"><i\n                            className=\"fa fa-step-forward\" aria-label=\"forward\" aria-hidden=\"true\"></i></button>\n                </div>\n\n                <section className=\"buttonContainer\">\n                    <Button variant=\"primary\" disabled={this.state.enable} onClick={()=> this.buttonClicked(\"enable\")}>\n                        Enable Voting\n                    </Button>\n                    <Button variant=\"primary\" disabled={this.state.disable} onClick={()=> this.buttonClicked(\"disable\")}>\n                        Disable Voting\n                    </Button>\n                    <Button variant=\"primary\" disabled={this.state.winner} onClick={()=> this.buttonClicked(\"winner\")}>\n                        Display Winner\n                    </Button>\n                </section>\n            </div>\n        )\n    }\n\n    /**\n     * moves to the next phase of debate by updating the game state.\n     * if already on last phase, does nothing.\n     */\n    nextPhase() {\n        // update the game to have a currentPhase of currentPhase + 1\n        if (this.props.phases[this.props.phaseIndex + 1]) { \n            let newPhase = this.props.phaseIndex + 1;\n            this.props.updateGame(\"currentPhase\", newPhase);\n            this.props.updateGame(\"timeLeft\", this.props.phases[newPhase].seconds);\n        } else {\n            // do nothing. edge case: we are already at the last phase\n        }\n\n        // shouldn't run ever, but this is a sanity check in case the currentPhase\n        // ends up being bigger than the length of Phases\n        if (this.props.phaseIndex > this.props.phases.length - 1) {\n            this.props.updateGame(\"currentPhase\", this.props.phases.length - 1);\n        }\n    }\n\n    /**\n     * moves to the previous phase of the debate\n     */\n    prevPhase() {\n        console.log(\"previous!\");\n        if (this.props.phaseIndex > 0) {\n            // update the game to have a currentPhase of currentPhase - 1\n            // update timeLeft\n            let newPhase = this.props.phaseIndex - 1;\n            this.props.updateGame(\"currentPhase\", newPhase);\n            this.props.updateGame(\"timeLeft\", this.props.phases[newPhase].seconds);\n        } else {\n            // set timeLeft to be this.props.phases[0].seconds\n            this.props.updateGame(\"timeLeft\", this.props.phases[0].seconds);\n        }\n    }\n}\n\nexport default Controls;","import React from 'react';\nimport AudienceJoin from './AudienceJoin.js';\nimport Scoreboard from './Scoreboard.js';\nimport Timer from './Timer.js';\nimport Controls from './Controls';\nimport '../../css/game.css';\n\n/**\n * manages the game's scoreboard and timer.\n * closing the Admin Game of a session will pause the timer and end the debate.\n * @prop {string} sessionID - the ID of the session being accessed\n * @prop {string} player1 - name of the first player\n * @prop {string} player2 - name of the second player\n * @prop {string} topic - the argument being debated\n * @prop {object} timerObject - the object representing the timer.\n * @prop {number} timeLeft - number of seconds left in the round.\n * @prop {string} timerLabel - the message labeling the current phase\n * @prop {function} updateGame - callback function to change the state of App\n */\nclass AdminGame extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        if (this.props.sessionID && this.props.player1 && \n            this.props.player2 && this.props.topic) {\n            return(\n                <div>\n                    <Scoreboard \n                        player1={this.props.player1} \n                        player2={this.props.player2} \n                        topic={this.props.topic} \n                    />\n                    <Timer \n                        sessionID={this.props.sessionID}\n                        player1={this.props.player1}\n                        player2={this.props.player2}\n                        timerObject={this.props.timerObject}\n                        timeLeft={this.props.timeLeft}\n                        phaseIndex={this.props.currentPhase}\n                        phases={this.props.phases}\n                        isAdminTimer={true}\n                        updateGame={this.props.updateGame}\n                    />\n                    <Controls \n                        phaseIndex={this.props.currentPhase}\n                        phases={this.props.phases}\n                        updateGame={this.props.updateGame} \n                    />\n                    <AudienceJoin code={this.props.sessionID} />\n                </div>\n            );\n        } else {\n            return(\n                <div>\n                    <h2 id=\"error\">Session does not yet exist.</h2>\n                    <div class=\"extra-space\"></div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default AdminGame;","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport '../../css/game.css';\n\nclass WinnerModal extends React.Component {\n    render() {\n        return(\n            <Modal show={this.props.show} onHide={!this.props.show} centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>Congrats {this.props.winner}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"winnerBody\">\n                        <img className=\"winner-img\" src={require(\"../../img/winners.svg\")} alt=\"2 people with a golden trophy\" />\n                    </div>\n                    <br></br>\n                    We hope you learned lots during this debate and hope you will bring the spirit of debate with you as you go about your daily lives!\n                </Modal.Body>\n                <Modal.Footer></Modal.Footer>\n            </Modal>\n        )\n    }\n}\n\nexport default WinnerModal;","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport WinnerModal from './WinnerModal.js';\nimport firebase from 'firebase/app';\n\n/**\n * @prop {string} sessionID - the ID of the session being accessed\n * @prop {number} votes - the current sum of votes toward the speakers.\n * @prop {string} player1 - name of the first player\n * @prop {string} player2 - name of the second player\n * @prop {boolean} disableVoting - determines whether the vote button should currently be disabled\n * @prop {boolean} displayWinner - determines whether the winner should be disclosed.\n */\nclass Vote extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        modal: false,\n        disableVoting: this.props.disableVoting,\n        voted: false\n      }\n      console.log(this.state);\n      console.log(\"votes: \" + this.props.votes);\n      // move to castVote when done testing\n      // use once snapshot to get current vote #\n  }\n\n  /**\n   * casts this particular audience member's vote.\n   * the if/else wrapper in this function protects against people manually editing\n   * the HTML to vote when voting is still disabled.\n   * @param {string} votedPlayer - \"player1\" if the button to vote for player 1 was clicked. \n   */\n  castVote (votedPlayer) {\n    let tally = (votedPlayer === \"player1\" ? 1 : -1); // calculate who I voted for\n    if (!this.disableVoting) {\n        this.setState({voted: true}); // locks you out from voting again\n        this.props.updateGame(\"votes\", this.props.votes + tally); // might not be necessary\n\n        // reference the \"votes\" key in the current session\n        // TODO: How do I specifically update an endpoint, like \"votes\"? I don't want to change anything else in Firebase\n        let sessionRef = firebase.database().ref('sessions').child(this.props.sessionID);\n        let voteSum = this.props.votes + tally;\n        sessionRef.set({\n            votes: voteSum\n        }).catch(err => console.log(err));\n    } else {\n        console.log(\"debug: uh oh! looks like you voted when the button should be disabled\");\n    }\n    \n      console.log(this.state)\n  }\n\n  componentDidMount() {\n    let sessionRef = firebase.database().ref('sessions/' + this.props.code);\n    sessionRef.on('value', (snapshot) => {\n        let sesh = snapshot.val();\n        this.setState({numVotes: sesh.votes})\n        console.log(sesh.votes);\n    })\n  }\n\n  // tally votes with onClick event- voted player 1? numVotes + 1\n  //                               - voted player 2? numVotes - 1\n  onClickPlayer1 = () => {\n    // let sessionRef = firebase.database().ref('sessions').child(this.props.code);\n    // sessionRef.set({\n    //     votes: this.state.numVotes + 1\n    // }).catch(err => console.log(err));\n    this.setState({voted: true});\n  }\n\n  onClickPlayer2 = () => {\n    // let sessionRef = firebase.database().ref('sessions').child(this.props.code);\n    // sessionRef.set({\n    //     votes: this.state.numVotes + 1\n    // }).catch(err => console.log(err));\n    this.setState({voted: true});\n  }\n\n  modalBody() {\n      return (\n        <div className=\"votingBody\">\n            <p>Who won the debate?</p>\n            <div className=\"modal-vote-row row\">\n                <div className=\"col\">\n                <Button variant=\"secondary\" onClick={() => this.castVote(\"player1\")}>\n                    {this.props.player1}\n                </Button>\n                </div>\n                <div className=\"col\">\n                    <p className=\"my-2\">OR</p>\n                </div>\n                <div className=\"col\">\n                <Button variant=\"secondary\" onClick={() => this.castVote(\"player2\")}>\n                {this.props.player2}\n                </Button>\n                </div>\n            </div>\n        </div>\n      )\n  }\n\n  votingMessage() {\n      return (\n        <div className=\"votingMessage\">\n            <p>\n                Hang tight as we tally the votes! <br/>\n                Click anywhere to close this modal!\n            </p>\n        </div>\n      )\n  }\n\n    render(){\n        return (\n            <section className=\"gameContainer\">\n                <div className=\"text-center\">\n                    <Button variant=\"primary\" size=\"lg\" disabled={this.state.disableVoting} onClick={() => {this.setState({modal: true, disableVoting: true})}}>Vote</Button>\n                    <Modal show={this.state.modal} onHide={() => {this.setState({modal: false})}} centered>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Final Vote</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            {this.state.voted ? this.votingMessage() : this.modalBody()}\n                        </Modal.Body>\n                        <Modal.Footer></Modal.Footer>\n                    </Modal>\n                    <WinnerModal show={this.props.displayWinner} winner={this.props.code}/>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Vote;","import React from 'react';\nimport AudienceJoin from './AudienceJoin.js';\nimport Scoreboard from './Scoreboard.js';\nimport Timer from './Timer.js';\nimport Vote from './Vote.js';\nimport firebase from 'firebase/app';\nimport '../../css/game.css';\n\n/**\n * intended for audience members who join an existing game.\n * manages the game's scoreboard and timer.\n * @prop {string} sessionID - the ID of the session being accessed\n * @prop {object} phases - const object of the phases of the debate.\n * @prop {function} updateGame - callback function to change the state of App\n */\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sessionIsGood: false,\n            firebaseListener: null\n\n            /* The following are fields retrieved from Firebase:\n                player1\n                player2\n                topic\n                timeLeft\n                currentPhase\n                disableVoting\n                displayWinner\n            */\n        } \n    }\n    \n    /**\n     * establish a firebase connection. Every x seconds, this pings firebase for updates\n     * provided from AdminGame.\n     */\n    componentDidMount() {\n        let updateInterval = 300; /* CONFIG: length of time between each server ping */\n\n        this.state.firebaseListener = setInterval(() => {\n            firebase.database().ref('sessions/' + this.props.sessionID).once('value', (snapshot) => {\n                if (snapshot.exists()) {\n                    let sesh = snapshot.val();\n                    this.setState({\n                        player1: sesh.player1,\n                        player2: sesh.player2,\n                        topic: sesh.topic, \n                        timeLeft: sesh.timeLeft,\n                        currentPhase: sesh.currentPhase,\n                        disableVoting: !sesh.enable,\n                        displayWinner: sesh.displayWinner,\n                        sessionIsGood: true});\n                }\n            });\n        }, updateInterval);\n    }\n\n    /**\n     * removes the timer listening for Firebase changes.\n     */\n    componentWillUnmount() {\n        clearInterval(this.state.firebaseListener);\n        this.state.firebaseListener = null;\n    }\n\n    render() {\n        if (this.state.sessionIsGood) {\n                return(\n                    <div>\n                        <Scoreboard \n                            player1={this.state.player1} \n                            player2={this.state.player2} \n                            topic={this.state.topic} \n                        />\n                        <Timer \n                            player1={this.state.player1}\n                            player2={this.state.player2}\n                            timeLeft={this.state.timeLeft}\n                            phaseIndex={this.state.currentPhase}\n                            phases={this.props.phases}\n                            isAdminTimer={false}\n                            updateGame={this.props.updateGame}\n                        />\n                        <Vote \n                            player1={this.state.player1}\n                            player2={this.state.player2}\n                            votes={this.props.votes}\n                            sessionID={this.props.sessionID}\n                            disableVoting={this.state.disableVoting}\n                            displayWinner={this.state.displayWinner}\n                            updateGame={this.props.updateGame}\n                        />\n                        <AudienceJoin code={this.props.sessionID}/>\n                    </div>\n                );\n        } else {\n            return(\n                <div>\n                    <h2 id=\"error\">Error. This session does not yet exist.</h2>\n                </div>\n            );\n        }     \n    }\n}\n\nexport default Game;","import React from 'react';\nimport Navbar from './Components/Navbar.js';\nimport Footer from './Components/Footer.js';\nimport Home from './Components/Home/Home.js';\nimport CreateGame from './Components/CreateGame/CreateGame.js';\nimport AdminGame from './Components/Game/AdminGame.js';\nimport Game from './Components/Game/Game.js';\nimport LogIn from './Components/LogIn.js';\nimport './css/firebaseui-styling.global.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'; \n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBRMu88J7_n4IVzqLYfrObctzfSi-_FnP0\",\n  authDomain: \"project-kpdebate.firebaseapp.com\",\n  databaseURL: \"https://project-kpdebate.firebaseio.com\",\n  projectId: \"project-kpdebate\",\n  storageBucket: \"project-kpdebate.appspot.com\",\n  messagingSenderId: \"14281407017\",\n  appId: \"1:14281407017:web:8d8edc6edc9fa427fe7a38\",\n  measurementId: \"G-L8RHQ63M0E\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: 'popup',\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: '/',\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID\n  ]\n};\n\nconst phases = [{\n    title: \"Opening Statement\",\n    speaker: 1,\n    seconds: 60\n  },\n  {\n    title: \"Opening Statement\",\n    speaker: 2,\n    seconds: 60\n  },\n  {\n    title: \"Rebuttal\",\n    speaker: 1,\n    seconds: 60\n  },\n  {\n    title: \"Rebuttal\",\n    speaker: 2,\n    seconds: 60\n  },\n  {\n    title: \"Cross Examination\",\n    speaker: 1,\n    seconds: 180\n  },\n  {\n    title: \"Cross Examination\",\n    speaker: 2,\n    seconds: 180\n  },\n  {\n    title: \"Closing Statements\",\n    speaker: 1,\n    seconds: 60\n  },\n  {\n    title: \"Closing Statements\",\n    speaker: 2,\n    seconds: 60\n  },\n  {\n    title: \"Voting\",\n    seconds: 0\n  }];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // sessionID: \"4343\",\n      // player1: \"Kiran\",\n      // player2: \"Patrin\",\n      // topic: \"Is cereal a soup?\",\n      // currentSpeaker: 0,\n      // timerObject: null\n      currentPhase: 0,\n      enable: false,\n      displayWinner: false,\n      isSignedIn: false,\n      timeLeft: 60,\n      votes: 0\n    }\n  }\n\n  /**\n   * callback function provided to subcomponents.\n   * updates App's state for various changes made.\n   * Also updates firebase to maintain a decentralized connection.\n   */\n  handleChange = (key, value) => {\n    let stateChanges = {\n      [key]: value\n    };\n    this.setState(stateChanges);\n\n    if (this.state.sessionID) {\n      this.sessionRef = firebase.database().ref('sessions/' + this.state.sessionID);\n      this.sessionRef.set(this.state);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Navbar \n            isSignedIn={this.state.isSignedIn} \n            updateGame={this.handleChange.bind(this)}\n            uiConfig ={uiConfig}\n            />  \n          <Switch>\n            <Route path=\"/game\" component={Game}> \n              <Game \n                sessionID={this.state.sessionID}\n                phases={phases}\n                votes={this.state.votes}\n                updateGame={this.handleChange.bind(this)}\n                />\n            </Route>\n            <Route path=\"/create-game\" component={CreateGame}>\n              <CreateGame \n                updateGame={this.handleChange.bind(this)}\n                uiConfig={uiConfig}\n              />\n            </Route>\n            <Route path=\"/admin-game\" component={Game}> \n              <AdminGame \n                sessionID={this.state.sessionID}\n                player1={this.state.player1} \n                player2={this.state.player2} \n                topic={this.state.topic} \n                timerObject={this.state.timerObject}\n                timeLeft={this.state.timeLeft}\n                currentPhase={this.state.currentPhase}\n                phases={phases}\n                updateGame={this.handleChange.bind(this)}\n                disableVoting={!this.state.enable}\n                displayWinner={this.state.displayWinner}\n                />\n            </Route>\n            <Route path=\"/sign-in\">\n              <LogIn uiConfig ={uiConfig} fbAuth = {firebase.auth()}/>                         \n            </Route>\n            <Route path=\"/\" component={Home}>\n              <Home updateGame={this.handleChange.bind(this)}/>\n            </Route>\n          </Switch>\n          <Footer />  \n      </Router>\n      </div>\n    );\n  } \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}